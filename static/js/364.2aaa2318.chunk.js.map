{"version":3,"file":"static/js/364.2aaa2318.chunk.js","mappings":"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","sources":["components/ProductCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ProductCard({ product, onCopyInfo, copySuccess, onAddToGym }) {\n  const [quantity, setQuantity] = useState('1');\n  const [selectedGym, setSelectedGym] = useState('');\n  const [customQty, setCustomQty] = useState('');\n  const [previewUrl, setPreviewUrl] = useState(\"https://via.placeholder.com/300x200?text=Loading...\");\n  const [loading, setLoading] = useState(!!product.URL);\n\n  const handleQuantityChange = (e) => {\n    const value = e.target.value;\n    if (value === 'custom') {\n      setQuantity('custom');\n      setCustomQty('');\n    } else {\n      setQuantity(value);\n      setCustomQty('');\n    }\n  };\n\n  const handleCustomQtyChange = (e) => {\n    const value = e.target.value;\n    if (/^\\d*$/.test(value)) {\n      setCustomQty(value);\n    }\n  };\n\n  const handleAddToGym = () => {\n    const qty = quantity === 'custom' ? parseInt(customQty, 10) : parseInt(quantity, 10);\n    if (selectedGym && qty > 0) {\n      onAddToGym(product, selectedGym, qty);\n      setQuantity('1');\n      setCustomQty('');\n      setSelectedGym('');\n    }\n  };\n\n  // Format cost to ensure single $ symbol\n  const formatCost = (cost) => {\n    if (!cost) return '';\n    // Remove any existing $ symbols and add a single one\n    return `$${cost.replace(/[$]/g, '')}`;\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    if (product.URL) {\n      fetch(`https://api.microlink.io/?url=${encodeURIComponent(product.URL)}&screenshot=true&meta=false`)\n        .then(res => res.json())\n        .then(data => {\n          if (isMounted && data.status === 'success' && data.data.screenshot && data.data.screenshot.url) {\n            setPreviewUrl(data.data.screenshot.url);\n          } else {\n            setPreviewUrl(\"https://via.placeholder.com/300x200?text=No+Preview\");\n          }\n        })\n        .catch(() => setPreviewUrl(\"https://via.placeholder.com/300x200?text=No+Preview\"))\n        .finally(() => setLoading(false));\n    } else {\n      setPreviewUrl(\"https://via.placeholder.com/300x200?text=No+Preview\");\n      setLoading(false);\n    }\n    return () => { isMounted = false; };\n  }, [product.URL]);\n\n  return (\n    <div className={`product-card${product.URL ? ' has-url' : ''}`}>\n      {product.URL ? (\n        <a\n          href={product.URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ display: 'block' }}\n        >\n          <img\n            src={previewUrl}\n            alt={product[\"Item Name\"]}\n            className=\"product-preview-image\"\n          />\n        </a>\n      ) : (\n        <img\n          src={previewUrl}\n          alt={product[\"Item Name\"]}\n          className=\"product-preview-image\"\n        />\n      )}\n      <div className=\"product-card-content\">\n        <div className=\"product-card-header\">\n          <div className=\"title-container\">\n            <h3 className=\"product-title-fixed\">{product[\"Item Name\"]}</h3>\n            {product.Preferred?.toLowerCase() === 'yes' && (\n              <span className=\"preferred-badge\"><span role=\"img\" aria-label=\"star\">‚≠ê</span> Preferred Item</span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"product-details\">\n          <p className=\"product-brand\">{product.Brand}</p>\n          <p className=\"product-category\">{product.Category}</p>\n          {product.Cost && <p className=\"product-cost\">{formatCost(product.Cost)}</p>}\n          {product[\"Exos Part Number\"] && (\n            <p className=\"product-part-number\">{product[\"Exos Part Number\"]}</p>\n          )}\n        </div>\n\n        <div className=\"product-actions\">\n          <div style={{ display: 'flex', flexDirection: 'row', gap: '1rem', alignItems: 'center', marginBottom: '0.5rem' }}>\n            <input\n              list=\"gyms\"\n              value={selectedGym}\n              onChange={e => setSelectedGym(e.target.value)}\n              className=\"gym-select\"\n              style={{ width: '90px', height: '38px' }}\n              placeholder=\"Select Gym\"\n            />\n            <datalist id=\"gyms\">\n              <option value=\"MP2\" />\n              <option value=\"MAT3\" />\n              <option value=\"MP5\" />\n            </datalist>\n            <div style={{ flex: 1 }}></div>\n            <input\n              type=\"number\"\n              min=\"1\"\n              value={quantity}\n              onChange={e => setQuantity(e.target.value.replace(/^0+/, ''))}\n              className=\"quantity-input\"\n              style={{ width: '90px', height: '38px' }}\n              placeholder=\"Qty\"\n            />\n          </div>\n          <button\n            onClick={handleAddToGym}\n            disabled={!selectedGym || !quantity || isNaN(Number(quantity)) || Number(quantity) < 1}\n            className=\"add-to-gym-button\"\n          >\n            Add to Gym\n          </button>\n          <button\n            onClick={() => onCopyInfo(product)}\n            className={`copy-button ${copySuccess === product[\"Item Name\"] ? 'success' : ''}`}\n          >\n            {copySuccess === product[\"Item Name\"] ? 'Copied!' : 'Copy Info'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nProductCard.propTypes = {\n  product: PropTypes.shape({\n    \"Item Name\": PropTypes.string,\n    Brand: PropTypes.string,\n    Category: PropTypes.string,\n    Cost: PropTypes.string,\n    \"Exos Part Number\": PropTypes.string,\n    Preferred: PropTypes.string,\n    URL: PropTypes.string,\n  }).isRequired,\n  onCopyInfo: PropTypes.func.isRequired,\n  copySuccess: PropTypes.string,\n  onAddToGym: PropTypes.func.isRequired,\n};\n\nexport default React.memo(ProductCard); "],"names":["ProductCard","_ref","_product$Preferred","product","onCopyInfo","copySuccess","onAddToGym","quantity","setQuantity","useState","selectedGym","setSelectedGym","customQty","setCustomQty","previewUrl","setPreviewUrl","loading","setLoading","URL","useEffect","isMounted","fetch","concat","encodeURIComponent","then","res","json","data","status","screenshot","url","catch","finally","_jsxs","className","children","_jsx","href","target","rel","style","display","src","alt","Preferred","toLowerCase","role","Brand","Category","Cost","cost","replace","flexDirection","gap","alignItems","marginBottom","list","value","onChange","e","width","height","placeholder","id","flex","type","min","onClick","handleAddToGym","qty","parseInt","disabled","isNaN","Number","React"],"sourceRoot":""}