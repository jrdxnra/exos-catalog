{"version":3,"file":"static/js/364.dbcddf27.chunk.js","mappings":"mKAqGA,QAlGA,SAAoBA,GAAoD,IAADC,EAAA,IAAlD,QAAEC,EAAO,WAAEC,EAAU,YAAEC,EAAW,WAAEC,GAAYL,EACnE,MAAOM,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAClCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IAiB/C,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKX,EAAQ,eACyB,SAApB,QAAjBD,EAAAC,EAAQa,iBAAS,IAAAd,OAAA,EAAjBA,EAAmBe,iBAClBL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,yBAKxCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAEX,EAAQe,SACtCN,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAEX,EAAQgB,WACxChB,EAAQiB,OAAQL,EAAAA,EAAAA,MAAA,KAAGF,UAAU,eAAcC,SAAA,CAAC,IAAEX,EAAQiB,QACtDjB,EAAQ,sBACPS,EAAAA,EAAAA,KAAA,KAAGC,UAAU,sBAAqBC,SAAEX,EAAQ,0BAIhDY,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,MAAA,UACEM,MAAOX,EACPY,SAAWC,GAAMZ,EAAeY,EAAEC,OAAOH,OACzCR,UAAU,aAAYC,SAAA,EAEtBF,EAAAA,EAAAA,KAAA,UAAQS,MAAM,GAAEP,SAAC,gBACjBF,EAAAA,EAAAA,KAAA,UAAQS,MAAM,MAAKP,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQS,MAAM,OAAMP,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQS,MAAM,MAAKP,SAAC,cAIxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAAA,SACEa,KAAK,SACLC,IAAI,IACJL,MAAOd,EACPe,SAvDkBC,IAC5B,MAAMF,EAAQM,SAASJ,EAAEC,OAAOH,MAAO,IACnCA,EAAQ,GACVb,EAAYa,IAqDJR,UAAU,sBAIdD,EAAAA,EAAAA,KAAA,UACEgB,QAtDaC,KACjBnB,GAAeH,EAAW,IAC5BD,EAAWH,EAASO,EAAaH,GACjCC,EAAY,GACZG,EAAe,MAmDTmB,UAAWpB,EACXG,UAAU,oBAAmBC,SAC9B,gBAIDF,EAAAA,EAAAA,KAAA,UACEgB,QAASA,IAAMxB,EAAWD,GAC1BU,UAAS,eAAAkB,OAAiB1B,IAAgBF,EAAQ,aAAe,UAAY,IAAKW,SAEjFT,IAAgBF,EAAQ,aAAe,UAAY,qBAMhE,C","sources":["components/ProductCard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ProductCard({ product, onCopyInfo, copySuccess, onAddToGym }) {\n  const [quantity, setQuantity] = useState(1);\n  const [selectedGym, setSelectedGym] = useState('');\n\n  const handleQuantityChange = (e) => {\n    const value = parseInt(e.target.value, 10);\n    if (value > 0) {\n      setQuantity(value);\n    }\n  };\n\n  const handleAddToGym = () => {\n    if (selectedGym && quantity > 0) {\n      onAddToGym(product, selectedGym, quantity);\n      setQuantity(1);\n      setSelectedGym('');\n    }\n  };\n\n  return (\n    <div className=\"product-card\">\n      <div className=\"product-card-content\">\n        <div className=\"product-card-header\">\n          <div className=\"title-container\">\n            <h3>{product[\"item name\"]}</h3>\n            {product.preferred?.toLowerCase() === 'yes' && (\n              <span className=\"preferred-badge\">Preferred Item</span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"product-details\">\n          <p className=\"product-brand\">{product.brand}</p>\n          <p className=\"product-category\">{product.category}</p>\n          {product.cost && <p className=\"product-cost\">${product.cost}</p>}\n          {product[\"exos part number\"] && (\n            <p className=\"product-part-number\">{product[\"exos part number\"]}</p>\n          )}\n        </div>\n\n        <div className=\"product-actions\">\n          <div className=\"gym-selector\">\n            <select\n              value={selectedGym}\n              onChange={(e) => setSelectedGym(e.target.value)}\n              className=\"gym-select\"\n            >\n              <option value=\"\">Select Gym</option>\n              <option value=\"MP2\">MP2</option>\n              <option value=\"MAT3\">MAT3</option>\n              <option value=\"MP5\">MP5</option>\n            </select>\n          </div>\n          \n          <div className=\"quantity-selector\">\n            <input\n              type=\"number\"\n              min=\"1\"\n              value={quantity}\n              onChange={handleQuantityChange}\n              className=\"quantity-input\"\n            />\n          </div>\n\n          <button\n            onClick={handleAddToGym}\n            disabled={!selectedGym}\n            className=\"add-to-gym-button\"\n          >\n            Add to Gym\n          </button>\n\n          <button\n            onClick={() => onCopyInfo(product)}\n            className={`copy-button ${copySuccess === product[\"item name\"] ? 'success' : ''}`}\n          >\n            {copySuccess === product[\"item name\"] ? 'Copied!' : 'Copy Info'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nProductCard.propTypes = {\n  product: PropTypes.shape({\n    \"item name\": PropTypes.string,\n    brand: PropTypes.string,\n    category: PropTypes.string,\n    cost: PropTypes.string,\n    \"exos part number\": PropTypes.string,\n    preferred: PropTypes.string,\n  }).isRequired,\n  onCopyInfo: PropTypes.func.isRequired,\n  copySuccess: PropTypes.string,\n  onAddToGym: PropTypes.func.isRequired,\n};\n\nexport default ProductCard; "],"names":["_ref","_product$preferred","product","onCopyInfo","copySuccess","onAddToGym","quantity","setQuantity","useState","selectedGym","setSelectedGym","_jsx","className","children","_jsxs","preferred","toLowerCase","brand","category","cost","value","onChange","e","target","type","min","parseInt","onClick","handleAddToGym","disabled","concat"],"sourceRoot":""}